name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v0.0.1, v1.2.3 等格式的标签
  workflow_dispatch:  # 保留手动触发选项
    inputs:
      version:
        description: "版本号（留空则自动递增，如：v0.0.2）"
        required: false
        type: string
      bump_type:
        description: "版本递增类型"
        required: false
        default: "patch"
        type: choice
        options:
          - patch # v0.0.1 -> v0.0.2
          - minor # v0.0.1 -> v0.1.0
          - major # v0.0.1 -> v1.0.0

env:
  GO_VERSION: "1.21"
  MANIFEST_URL: "https://storage.bizyair.cn/releases/manifest.json"

jobs:
  prepare:
    name: 准备版本号
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 确定版本号
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # 使用手动输入的版本号
            VERSION="${{ github.event.inputs.version }}"
            echo "使用手动指定的版本号: $VERSION"
          else
            # 自动递增版本号（标签触发或手动触发时都使用此逻辑）
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            if [ -z "$BUMP_TYPE" ]; then
              BUMP_TYPE="patch"
            fi
            echo "自动递增版本号（类型: $BUMP_TYPE）"
            
            # 下载现有 manifest（如果存在）
            if curl -f -s "${{ env.MANIFEST_URL }}" -o manifest.json; then
              CURRENT_VERSION=$(jq -r '.latest_version' manifest.json)
              echo "当前最新版本: $CURRENT_VERSION"
              
              # 解析版本号
              CURRENT_VERSION=${CURRENT_VERSION#v}
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
              
              # 根据 bump_type 递增
              case "$BUMP_TYPE" in
                major)
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                minor)
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                patch|*)
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              
              VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            else
              echo "未找到现有 manifest，使用默认版本号"
              VERSION="v0.0.1"
            fi
            
            echo "新版本号: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    name: 构建 ${{ matrix.goos }}-${{ matrix.goarch }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 构建二进制文件
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # 确定文件名
          PLATFORM="${GOOS}-${GOARCH}"
          # 将 darwin 转换为 macos
          if [ "$GOOS" = "darwin" ]; then
            PLATFORM="macos-${GOARCH}"
          fi

          if [ "$GOOS" = "windows" ]; then
            FILENAME="bizyair-${VERSION}-${PLATFORM}.exe"
          else
            FILENAME="bizyair-${VERSION}-${PLATFORM}"
          fi

          echo "构建 ${PLATFORM} 版本..."

          # 构建
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags "-w -s -X 'github.com/siliconflow/bizyair-cli/meta.Version=${VERSION}' -X 'github.com/siliconflow/bizyair-cli/meta.Commit=${GITHUB_SHA::7}' -X 'github.com/siliconflow/bizyair-cli/meta.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" \
            -a -tags=netgo \
            -o "dist/${FILENAME}" \
            main.go

          # 计算 SHA256
          cd dist
          sha256sum "${FILENAME}" | awk '{print $1}' > "${FILENAME}.sha256"

          echo "构建完成: ${FILENAME}"
          ls -lh "${FILENAME}"

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/*

  upload:
    name: 上传到 OSS
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 安装依赖
        run: |
          pip install requests alibabacloud-oss-python-sdk-v2

      - name: 上传到 OSS 并生成 manifest
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          API_KEY: ${{ secrets.BIZYAIR_API_KEY }}
          BASE_DOMAIN: ${{ secrets.BIZYAIR_BASE_DOMAIN || 'https://api.bizyair.cn' }}
        run: |
          python tools/upload_release.py

      - name: 显示上传结果
        run: |
          echo "✅ 版本 ${{ needs.prepare.outputs.version }} 已成功发布"
          echo "Manifest URL: ${{ env.MANIFEST_URL }}"
